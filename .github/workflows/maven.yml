# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ,"smallServ"]
  pull_request:
    branches: [ "master" ,"smallServ"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
        # 2. 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # 在GitHub仓库设置中配置此Secret

      - name: Install parent POM
        run: mvn clean install -N

      - name: Build interaction with Maven
        run: |
          cd CampusMarket-backend-interaction
          mvn test
          mvn clean package

      - name: Build common with Maven
        run: |
          cd campus-common
          mvn clean install -DskipTests

      - name: Save common artifact
        uses: actions/upload-artifact@v4
        with:
          name: campus-common
          path: campus-common/target/*.jar
          compression-level: 0 # 禁用压缩

      - name: Download common artifact
        uses: actions/download-artifact@v4
        with:
          name: campus-common
          path: campus-common/target

      - name: Build user with Maven
        run: |
          cd CampusMarket-backend-user
          mvn test
          mvn clean package

      - name: Build product with Maven
        run: |
          cd CampusMarket-backend-product
          mvn test
          mvn clean package

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14.16.0' # 指定 Node.js 版本

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
          restore-keys: |
            ${{ runner.os }}-node-

      - name: frontend
        run: |
          cd CampusMarket-frontend
          npm i
          npm run build

      # 4. 构建并推送前后端镜像
      - name: Build and Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-interaction:latest ./CampusMarket-backend-interaction
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-interaction:latest
          
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-product:latest ./CampusMarket-backend-product
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-product:latest
          
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backend-user:latest ./CampusMarket-backend-user
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-user:latest

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest ./CampusMarket-frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/database:latest ./database
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/database:latest

  deploy-to-local:
    needs: build
    runs-on: self-hosted # 使用这个标签，任务就会发配到你的本地Runner执行
    steps:
      - name: Deploy Backend Application
        shell: cmd
        run: |
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\backend-interaction.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\backend-product.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\backend-user.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\frontend.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\db-interaction.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\db-product.yaml"
          kubectl --kubeconfig="E:\config" apply -f "E:\tryGithubActions\CampusMarket_DevOps\k8s\db-user.yaml"

      - name: Deploy to K8s
        shell: cmd
        run: |
          kubectl --kubeconfig=E:\config set image deployment/backend-interaction-deployment backend-interaction=${{ secrets.DOCKERHUB_USERNAME }}/backend-interaction:latest
          kubectl --kubeconfig=E:\config set image deployment/backend-product-deployment backend-product=${{ secrets.DOCKERHUB_USERNAME }}/backend-product:latest
          kubectl --kubeconfig=E:\config set image deployment/backend-user-deployment backend-user=${{ secrets.DOCKERHUB_USERNAME }}/backend-user:latest
          kubectl --kubeconfig=E:\config set image deployment/frontend-deployment frontend=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          

      - name: scale out or in
        shell: cmd
        run: kubectl --kubeconfig=E:\config scale deployment backend-user-deployment --replicas=2